{"version":3,"file":"index-legacy.1de450f2.js","sources":["../../vite/modulepreload-polyfill","../../src/function/cache.ts","../../src/function/queue.ts","../../src/function/retry.ts","../../example/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import hash from 'object-hash';\n\nconst md5 = (v: any, options: any = {}) => hash(v, { algorithm: 'md5', ...options });\n/**\n * 缓存配置\n */\ninterface IOptions {\n  /**\n   * 筛选需要进行缓存key运算的参数，默认为全部入参;\n   * @default (...arg) => arg;\n   * @param {Array} arg:调用 fn 的参数数组；\n   * @returns {any} 进行缓存key运算的数据;\n   */\n  params?: (...arg: any[]) => any[];\n  /**\n  * 定义缓存key运算的方式，默认使用object-hash运算;\n   * @default (...arg) => hash(arg);\n   * @param {Array} arg:调用 fn 的参数数组；\n   * @returns {String} 缓存key;\n   */\n  key?: (...arg: any[]) => string;\n  /**\n   * 自定义缓存的存储方式\n   */\n  storage?: { set: (key: string, value: any) => any, get: (key: string) => any };\n  /**\n   * 是否开启调试日志\n   * @default false\n   */\n  debug?: boolean;\n  /**\n   * 需要透传给object-hash的配置，用于精确控制hash的生成，例如数组和散列是否排序后计算hash\n   * @see https://www.npmjs.com/package/object-hash/v/2.2.0\n   */\n  [key: string]: any\n}\n\n/**\n * 缓存高阶函数，默认使用入参hash值作为缓存key，可通过options配置自定义，\n * 复杂类型入参将会用属性或值进行hash运算，如function、map、set、buffer、array、object；\n * 散列类型数据会排序后再进行hash计算，如map、object\n * @example \n * const fn = cacheWarpper((a) => a + a);\n * (await fn(1)) === 2;\n * @param {Async Function} fn 需要使用缓存的函数\n * @param {Object} options 缓存配置\n * @returns \n */\nexport const cacheWarpper = (fn: Function, options?: IOptions) => {\n  const {\n    params = (...arg: any[]) => arg,\n    key = (...arg: any[]) => md5(arg, options),\n    storage = new Map(),\n    debug = false\n  } = options || {};\n  return async (...arg: any[]) => {\n    const cacheKey: string = await key(...await params(...arg))\n    const cacheValue = await storage.get(cacheKey);\n    if (cacheValue) {\n      debug && console.log('Cache found', { cacheKey, cacheValue });\n      return cacheValue;\n    } else {\n      debug && console.log('Cache not found', { cacheKey });\n      const result = await fn(...arg);\n      await storage.set(cacheKey, result)\n      return result\n    }\n  };\n}\n","import { clamp, inRange } from 'lodash';\nimport Queue from '../common/queue';\ninterface IOptions {\n  /**\n   * 队列任务并发限制\n   * @default 6\n   */\n  concurrency?: number;\n  /**\n   * 队列的异常处理方式，发生异常是否终止队列\n   * @default false\n   */\n  failAbort?: boolean;\n  /**\n   * 弹性并发配置，目的是为了不同的执行环境下，能够根据任务的执行耗时，动态调整并发数，从而将单个任务的执行耗时控制在接受范围内。\n   * @default undefined\n   */\n  elastic?: {\n    /**\n     * 是否开启弹性执行\n     * @default false\n     */\n    enable?: boolean;\n    /**\n     * 队列任务的理想执行耗时(ms)，用于计算弹性并发策略\n     * @default 10000\n     */\n    idealDuration?: number;\n  }\n  /**\n   * 是否打印调试信息\n   * @default false\n   */\n  debug?: boolean;\n}\n\n\n/**\n * 队列执行高阶函数，支持弹性并发\n * @example \n * const fn = queueWarpper((a) => new Promise(r=>setTimeout(r,1000)),{concurrency:1});\n * fn() // delay 1s\n * fn() // delay 1s\n * @param fn 需要队列执行的函数\n * @param options 队列配置\n * @returns 包装后的队列函数，再次调用后插入队列自动执行\n */\nexport const queueWarpper = (\n  fn: Function,\n  options?: IOptions,\n) => {\n  const {\n    concurrency = 6,\n    failAbort = true,\n    debug = false,\n    elastic: {\n      enable = false,\n      idealDuration = 10000,\n    } = {}\n  } = options || {};\n  const startConcurrency = enable ? 1 : concurrency;\n  const queueIns = new Queue({ concurrency: startConcurrency, autostart: true });\n\n  if (enable && concurrency > 1) {\n    // 开始任务时，添加执行环境信息，用于后续的并发伸缩计算\n    queueIns.on('start', (job) => {\n      job._startTime = Number(new Date());\n      job._concurrency = queueIns.concurrency;\n    });\n\n    // 每个任务完成时进行弹性并发判断\n    queueIns.on('success', (result, job) => {\n      // 并发数变更前的任务，缺乏准确性，不进行伸缩计算\n      if (job._concurrency !== queueIns.concurrency) return;\n      const duration = Number(new Date()) - job._startTime;\n      let nowConcurrency: number = queueIns.concurrency;\n      // 期望值上下10%为合理波动范围，不进行伸缩\n      if (inRange(duration, idealDuration * 0.9, idealDuration * 1.1)) return;\n      if (duration < idealDuration) {\n        nowConcurrency++;\n      } else {\n        nowConcurrency--;\n      }\n      nowConcurrency = clamp(nowConcurrency, 1, concurrency);\n      if (queueIns.concurrency !== nowConcurrency) {\n        queueIns.concurrency = nowConcurrency;\n      }\n      debug && console.log('queueWarpper success', { duration, start: job._startTime, nowConcurrency });\n    });\n  }\n\n  let errorHandler = () => { };\n  // 根据配置添加失败中止逻辑，（queue的error事件太过滞后，无法在任务失败之前执行）\n  if (failAbort) {\n    errorHandler = () => {\n      debug && console.log('queueWarpper error', queueIns);\n      queueIns.end();\n    };\n  }\n\n  queueIns.start();\n  return (...arg: any) => {\n    return new Promise((resolve, reject) => {\n      queueIns.push(async () => {\n        try {\n          const result = await fn(...arg)\n          resolve(result);\n        } catch (err) {\n          errorHandler();\n          reject(err);\n        }\n      });\n    });\n  };\n};","import retry from 'retry';\n\n/**\n  * 重试配置\n  * 更多需要透传给retry的配置\n  * @see https://www.npmjs.com/package/retry\n */\ninterface IOptions {\n  /**\n   * 是否开启调试日志\n   * @default false\n   */\n  debug?: boolean;\n  /**\n   * 重试次数\n   * @default 2 俗话说，事不过三\n   */\n  retries?: number;\n  /**\n   * 更多需要透传给retry的配置\n   * @see https://www.npmjs.com/package/retry\n   */\n  [key: string]: any\n}\n\n\n/**\n * 重试高阶函数\n * @example \n * const fn = retryWarpper(() => {\n *  if(Math.random()>0.5){\n *    throw New Error()\n *  }else{\n *    return 1\n *  }\n * });\n * (await fn()) === 1;\n * @param cb 需要重试的函数\n * @param options 重试配置\n * @returns 包装后的重试函数，只要重试成功，就不会报错\n */\nexport function retryWarpper(cb: (...arg: any) => any, options?: IOptions) {\n  const { debug = false, retries = 2 } = options || {};\n  var operation = retry.operation({ ...options, retries });\n  return (...arg: any[]) => new Promise<any>((resolve, reject) => {\n    operation.attempt(async () => {\n      try {\n        const attempts = operation.attempts();\n        if (attempts > 1) {\n          debug && console.log('任务执行失败，正在重试，当前重试次数:', attempts - 1, '; 最大重试次数：', retries);\n        }\n        const result = await cb(...arg);\n        resolve(result);\n      } catch (error) {\n        if (operation.retry(error as any)) {\n          return;\n        }\n        reject(operation.errors());\n      }\n    });\n  });\n}","import \"./index.css\";\nimport ReactDOM from \"react-dom\";\nimport { useEffect, useState } from 'react';\nimport { retryWarpper, queueWarpper, cacheWarpper } from '../src/index'\nwindow.retryWarpper = retryWarpper;\nwindow.queueWarpper = queueWarpper;\nwindow.cacheWarpper = cacheWarpper;\n\nfunction Retry() {\n  const [count, setCount] = useState(0);\n  const [value, setValue] = useState(0);\n  useEffect(() => {\n    const fn = retryWarpper(() => {\n      const x = Math.random();\n      setCount(d => d + 1)\n      if (x > 0.9) {\n        return x\n      } else {\n        throw new Error();\n      }\n    }, { retries: 99, factor: 1, maxTimeout: 1000 })\n    fn().then((d) => setValue(d));\n  }, [])\n  return <div>\n    <h2>Retry</h2>\n    <div>{`const fn = retryWarpper(() => {`}</div>\n    <div>{`const x = Math.random();`}</div>\n    <div>{`if(x > 0.9){return x}else{throw new Error()}`}</div>\n    <div>{`}, { debug: true, retries: 99, factor: 1, maxTimeout: 1000 })`}</div>\n    <div>{`console.log(await fn())`}</div>\n    <div>重试次数:{count}</div>\n    <div>执行结果:{value || '执行中'}</div>\n  </div>\n}\n\nfunction Queue() {\n  const [count, setCount] = useState(0);\n  const [value, setValue] = useState<number[]>([]);\n  useEffect(() => {\n    const startTime = +new Date();\n    const fn = queueWarpper(() => {\n      return new Promise(r => setTimeout(() => {\n        setCount(d => d + 1)\n        setValue(v => [...v, +new Date() - startTime]);\n        r()\n      }, 1000))\n    }, { concurrency: 1 })\n    Promise.all([fn(), fn(), fn(), fn()])\n  }, [])\n  return <div>\n    <h2>Queue</h2>\n    <div>{`const originFn = ()=> new Promise(r => setTimeout(()=>{console.log('完成一个');r()},1000))`}</div>\n    <div>{`const fn = queueWarpper(originFn,{ concurrency: 1 })`}</div>\n    <div>{`fn();fn();fn();fn();`}</div>\n    <div>当前执行任务索引:{count}</div>\n    <div>任务完成时间:</div>\n    {value.map((v, k) => <div key={v}>{k + 1}:{v}</div>)}\n  </div>\n}\n\nfunction Cache() {\n  const [count, setCount] = useState(0);\n  const [value, setValue] = useState(0);\n  useEffect(() => {\n    const fn = cacheWarpper((a, b) => {\n      setCount(d => d + 1)\n      return a + b\n    }, { concurrency: 1 })\n    setInterval(() => {\n      setValue(d => d + 1)\n      fn(1, 2);\n    }, 1000)\n  }, [])\n  return <div>\n    <h2>Cache</h2>\n    <div>{`const fn = cacheWarpper((a,b)=> {`}</div>\n    <div>{`var x =a+b;console.log(x);return x})`}</div>\n    <div>{`setInterval(() => fn(1, 2),1000)`}</div>\n    <div>实际运行次数:{count}</div>\n    <div>调用次数:{value}</div>\n  </div>\n}\n\nfunction App() {\n  return <div>\n    <h1>high-order-function.js</h1>\n    <div style={{ display: 'flex', width: '100%', justifyContent: 'space-between' }}>\n      <Retry />\n      <Queue />\n      <Cache />\n    </div>\n    <br />\n    <br />\n    <br />\n    <br />\n    <br />\n    <br />\n    <div>复制代码到控制台试试？retryWarpper, queueWarpper, cacheWarpper </div>\n  </div>\n\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n"],"names":["md5","v","options","hash","algorithm","cacheWarpper","fn","params","arg","key","storage","Map","debug","cacheKey","get","cacheValue","console","log","_context","result","set","queueWarpper","concurrency","failAbort","elastic","enable","idealDuration","queueIns","Queue","autostart","on","job","_startTime","Number","Date","_concurrency","duration","nowConcurrency","inRange","clamp","start","errorHandler","end","Promise","resolve","reject","push","_context2","cb","retries","operation","retry","attempt","attempts","_context3","errors","useState","count","setCount","value","setValue","retryWarpper","x","Math","random","d","Error","factor","maxTimeout","then","startTime","setTimeout","all","map","k","a","b","style","display","width","justifyContent","Retry","Cache","window","ReactDOM","render","App","document","getElementById"],"mappings":"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"}